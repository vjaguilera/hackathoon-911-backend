generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id             String   @id @default(uuid())
  user_id        String
  street_address String
  city           String
  region         String
  postal_code    String
  country        String
  address_type   String
  is_primary     Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model bank_accounts {
  id             String   @id @default(uuid())
  user_id        String
  bank_name      String
  account_type   String
  account_number String
  rut            String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  users          users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model emergency_contacts {
  id           String   @id @default(uuid())
  user_id      String
  contact_name String
  phone_number String
  relationship String
  email        String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model emergency_events {
  id                  String   @id @default(uuid())
  user_id             String
  event_type          String
  description         String
  location            String
  audio_recording_url String?
  status              String   @default("active")
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  users               users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model health_insurance {
  id               String   @id @default(uuid())
  user_id          String
  primary_provider String
  provider_name    String
  plan_name        String?
  member_id        String
  coverage_info    String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  users            users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model medical_info {
  id                  String   @id @default(uuid())
  user_id             String   @unique
  medical_conditions  String[]
  allergies           String[]
  medications         String[]
  blood_type          String?
  emergency_notes     String?
  voice_password_hash String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  users               users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model supplementary_insurance {
  id                String   @id @default(uuid())
  user_id           String
  insurance_type    String
  insurance_company String
  policy_number     String
  coverage_info     String?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  users             users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id                      String                    @id
  email                   String                    @unique
  phone_number            String?
  full_name               String
  rut                     String?                   @unique
  profile_picture_url     String?
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  addresses               addresses[]
  bank_accounts           bank_accounts[]
  emergency_contacts      emergency_contacts[]
  emergency_events        emergency_events[]
  health_insurance        health_insurance[]
  medical_info            medical_info?
  supplementary_insurance supplementary_insurance[]
  vehicles                vehicles[]
}

model vehicle_insurance {
  id                 String   @id @default(uuid())
  vehicle_id         String
  insurance_company  String
  policy_number      String
  coverage_type      String
  expiration_date    DateTime
  phone_insurance    String
  claim_process_info String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  vehicles           vehicles @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)
}

model vehicles {
  id                String              @id @default(uuid())
  user_id           String
  license_plate     String
  brand             String
  model             String
  year              Int
  color             String
  vin               String?
  vehicle_type      String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  vehicle_insurance vehicle_insurance[]
  users             users               @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
